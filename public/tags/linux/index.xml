<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Agus Fahmi Aji Pramana&#39;s Blogging Site</title>
    <link>http://localhost:1313/tags/linux/</link>
    <description>Recent content in Linux on Agus Fahmi Aji Pramana&#39;s Blogging Site</description>
    <image>
      <title>Agus Fahmi Aji Pramana&#39;s Blogging Site</title>
      <url>http://localhost:1313/logo.svg</url>
      <link>http://localhost:1313/logo.svg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 19 May 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Essentials Commands Used by System Administrator</title>
      <link>http://localhost:1313/slides/linux-essentials-commands-used-by-system-administrator/</link>
      <pubDate>Fri, 19 May 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/slides/linux-essentials-commands-used-by-system-administrator/</guid>
      <description>Presentation on Linux System Administrator commands</description>
      <content:encoded><![CDATA[<h2 id="linux-final-presentation">Linux Final Presentation</h2>
<div
  style="padding-bottom:56.25%; position:relative; display:block; width: 100%">
  <iframe
    width="100%"
    height="100%"
    src="https://docs.google.com/presentation/d/e/2PACX-1vSF5qoNhYgLSMb-CtlSFq1XYu_NmsaYFjjipfSH_H9DIxfCTs0Zu7poPyHfJjc2kfIhoF1TPkflw1Zv/embed?start=false"
    frameborder="0"
    scrolling="no"
    allowfullscreen="true"
    mozallowfullscreen="true"
    webkitallowfullscreen="true"
    style="position:absolute; top:0; left: 0"></iframe>
</div>

]]></content:encoded>
    </item>
    <item>
      <title>Linux Server Stack Setup in Ubuntu 16.04 LTS</title>
      <link>http://localhost:1313/blogs/tech/linux-server-setup/</link>
      <pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/tech/linux-server-setup/</guid>
      <description>Learn to setup LEPP manually in Ubuntu Server.</description>
      <content:encoded><![CDATA[<blockquote>
<p>Credit: Anup Dhakal (<a href="https://anupdhakal.com">https://anupdhakal.com</a>)</p></blockquote>
<h2 id="introduction">Introduction</h2>
<p>In this guide, <strong>LEPP</strong> stands for <strong>Linux</strong>, <strong>Nginx</strong> (pronounced as Engine-X) , <strong>Postgres</strong> and <strong>PHP</strong> (PHP Hypertext Preprocessor).</p>
<h3 id="specificationstarget">Specifications/Target</h3>
<ul>
<li><strong>Ubuntu</strong> v16.04</li>
<li><strong>Nginx</strong> v1.10</li>
<li><strong>PHP</strong> v7.1</li>
<li><strong>Postgres</strong> v9.6.3</li>
<li><strong>phpPgAdmin</strong> v5.2</li>
</ul>
<p>But before we start, let&rsquo;s quickly make sure that we have some basic tools ready. Run the following commands in the terminal.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt update
</span></span><span class="line"><span class="cl">sudo apt install wget
</span></span><span class="line"><span class="cl">sudo apt install software-properties-common
</span></span></code></pre></div><p>Now let&rsquo;s start!</p>
<h2 id="custom-repositories">Custom Repositories</h2>
<p>Before beginning the installation, we want to add some repositories which will give us the latest corresponding packages for our server stack.</p>
<h3 id="nginx-repository">Nginx Repository</h3>
<p>For Ubuntu, in order to authenticate the Nginx repository signature and to eliminate warnings about missing PGP key during installation of the Nginx package, it is necessary to add the key used to sign the Nginx packages and repository to the apt program keyring. Only after then we will dare to add the repositories.</p>
<p><em>The above fact is true every time we add a custom repository. If we don&rsquo;t want to add any custom repository and use the ones provided to us by &ldquo;vanilla&rdquo; Ubuntu itself, we can just ignore this section of the guide, entirely. We have to keep in mind that the version numbers used in this guide are according to the default, most recent versions of the respective packages at the time of creation of this guide. So, we might have to be careful in coming sections of the guide where we start installation and setup of the stack. We would want to make sure then, that the version number would match to what we have installed, not what is shown in this guide.</em></p>
<p>Run the following code one by one in the terminal to add the Nginx stable repository. We need to accept any prompts, if asked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">wget http://nginx.org/keys/nginx_signing.key
</span></span><span class="line"><span class="cl">sudo apt-key add nginx_signing.key
</span></span><span class="line"><span class="cl">sudo sed -i <span class="s1">&#39;$a deb http://nginx.org/packages/ubuntu/ xenial nginx&#39;</span> /etc/apt/sources.list
</span></span><span class="line"><span class="cl">sudo sed -i <span class="s1">&#39;$a # deb-src http://nginx.org/packages/ubuntu/ xenial nginx&#39;</span> /etc/apt/sources.list
</span></span></code></pre></div><h3 id="postgres-repository">Postgres Repository</h3>
<p>The PostgreSQL apt repository supports LTS versions of Ubuntu 16.04 on amd64 and i386 architectures. This repository will integrate with your normal systems and patch management, and provide automatic updates for all supported versions of PostgreSQL throughout the support lifetime of PostgreSQL.</p>
<ul>
<li>Create the file <code>/etc/apt/sources.list.d/pgdg.list</code>, and add a line for the repository</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main
</span></span></code></pre></div><ul>
<li>Import the repository signing key, and update the package lists</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  sudo apt-key add -
</span></span></code></pre></div><h3 id="php-repository">PHP Repository</h3>
<p>The repository here we are going to install is the PHP PPA by <a href="https://launchpad.net/~ondrej/&#43;archive/ubuntu/php" title="Ondrej PHP PPA">Ondrej</a>. We can update our system with unsupported packages from this untrusted PPA by adding ppa:ondrej/php to our system&rsquo;s Software Sources. The following commands will help us to do so. We need to accept any prompts, if asked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo add-apt-repository ppa:ondrej/php
</span></span></code></pre></div><p><em>We might feel a little bit confused by the terms &ldquo;untrusted PPA&rdquo;, but there is actually no reason to worry. We just need to remember that, unlike Nginx&rsquo;s or the MariaDB&rsquo;s repositories, this is <strong>not</strong> an official upgrade path. But the PPA is well known, and is relatively safe to use.</em></p>
<h2 id="update-apt">Update APT</h2>
<p>Let&rsquo;s finally begin the actual installations processes.</p>
<p>First, we want to make sure we have the latest records in our local packages registry. Let&rsquo;s run the following command in the terminal like so.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt update
</span></span></code></pre></div><h2 id="installing-nginx">Installing Nginx</h2>
<p>First thing weâ€™re going to install is the server called Nginx.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt install nginx
</span></span></code></pre></div><p>We can check if Nginx is installed by typing <code>nginx -v</code> in the terminal.</p>
<h2 id="installing-postgres">Installing Postgres</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt-get install postgresql postgresql-contrib
</span></span></code></pre></div><p>We can check if Postgres is installed by executing <code>psql --version</code> in the terminal.</p>
<p><em>PHP makes use of the package <code>php-pgsql</code> as the database driver for Postgres.</em></p>
<h2 id="installing-php">Installing PHP</h2>
<p>Next thing we want to install is PHP. We need to install PHP with a few extensions that are mandatory for modern web applications.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt install php-cli php-fpm php-zip php-xml php-mbstring php-mcrypt php-curl php-gd php-pgsql php-bz2 php-gettext php-pear php-phpseclib php-tcpdf
</span></span></code></pre></div><p>We may run <code>php -v</code> in the terminal to check the version of PHP installed.</p>
<h2 id="configuring-nginx">Configuring Nginx</h2>
<p>We don&rsquo;t need to change anything right now. But if we want to, we can change the main configuration of Nginx as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo gedit /etc/nginx/nginx.conf
</span></span></code></pre></div><p>In the config file, notice the line with <code>user nginx</code>. This means Nginx will run as the user <strong>nginx</strong>. We should not forget to run <code>sudo systemctl restart nginx.service</code> if we make changes to any configuration file of Nginx.</p>
<h3 id="configuring-php-to-work-with-nginx">Configuring PHP to work with Nginx</h3>
<p>In order for PHP and Nginx to work together, we need to configure both of them. <em>We need to make sure that PHP-FPM (FastCGI Process Manager) runs as the <strong>same user</strong> as Nginx.</em> And for that we need to run <code>sudo gedit /etc/php/7.1/fpm/pool.d/www.conf</code> in the terminal and change the relevant lines as:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">...</span>
</span></span><span class="line"><span class="cl"><span class="na">user</span> <span class="o">=</span> <span class="s">nginx</span>
</span></span><span class="line"><span class="cl"><span class="na">group</span> <span class="o">=</span> <span class="s">nginx</span>
</span></span><span class="line"><span class="cl"><span class="na">...</span>
</span></span><span class="line"><span class="cl"><span class="na">listen.owner</span> <span class="o">=</span> <span class="s">nginx</span>
</span></span><span class="line"><span class="cl"><span class="na">listen.group</span> <span class="o">=</span> <span class="s">nginx</span>
</span></span><span class="line"><span class="cl"><span class="na">...</span>
</span></span></code></pre></div><p><em>Note the command where we used &hellip; php/<strong>7.1</strong>/fpm &hellip; . We want to make sure that <strong>7.1</strong> is the version that we actually have installed in our system. Refer <a href="/blogs/tech/linux-server-setup/#installing-php">this</a> section to go back and see how we installed PHP and PHP-FPM, and how to see the version of PHP installed.</em></p>
<p>We need to run <code>sudo systemctl restart php7.1-fpm.service</code> in the terminal to load the new configuration.</p>
<h3 id="default-site">Default Site</h3>
<p>Now comes the fun part where we create a default site that supports PHP. In our case, we want <code>~/www</code> as our directory of all websites. Normally, <code>/var/www</code> is used as the default one. Here we want to change it to a custom directory inside our home directory, as mentioned above.</p>
<p>First, we want to make sure the directory exists. Let&rsquo;s create a default site directory <code>_default_</code> with command <code>mkdir -p ~/www/_default_/public</code>.</p>
<p><em>Note that to add other sites, we can follow a similar pattern. We may create a new folder for each site, which has a <code>public</code> folder in it as the public entry point of the site.</em></p>
<p>Now to edit the default site configuration, let&rsquo;s run the following command in the terminal</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo gedit /etc/nginx/conf.d/default.conf
</span></span></code></pre></div><p>and replace its content with this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span> <span class="s">default_server</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span> <span class="s">default_server</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">root</span> <span class="s">/home/[OUR_USERNAME]/www/_default_/public</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">index</span> <span class="s">index.html</span> <span class="s">index.htm</span> <span class="s">index.php</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="nv">$uri/</span> <span class="p">=</span><span class="mi">404</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">autoindex</span> <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="p">~</span> <span class="sr">\.php$</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="p">=</span><span class="mi">404</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">fastcgi_split_path_info</span> <span class="s">^(.+\.php)(/.+)</span>$<span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">fastcgi_pass</span> <span class="s">unix:/run/php/php7.1-fpm.sock</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">fastcgi_index</span> <span class="s">index.php</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">fastcgi_param</span> <span class="s">SCRIPT_FILENAME</span> <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">include</span> <span class="s">fastcgi_params</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><em>Please note that we need to change <strong>[OUR_USERNAME]</strong> from above config file to our actual username.</em></p>
<p>Now let&rsquo;s run <code>sudo systemctl restart nginx.service</code> to reload our new configuration.</p>
<p>Now we should be able to see on browser that <a href="http://localhost" title="Localhost">http://localhost</a> actually works, and most probably shows an empty index.</p>
<p><strong>**Ba Dum Tis**</strong></p>
<p>We can put any file in the <code>~/www/_default_/public</code> directory and it should be showing in the browser after a refresh.</p>
<h2 id="configuring-postgres">Configuring Postgres</h2>
<p>Switch over to the postgres account on your server by typing:</p>
<pre tabindex="0"><code>user@aspire:~$ sudo -i -u postgres
</code></pre><p>Let&rsquo;s Create a New Role</p>
<pre tabindex="0"><code>postgres@aspire:~$ createuser --interactive -P
Enter name of role to add: {role name}
Enter password for new role:
Enter it again:
Shall the new role be a superuser? (y/n)
</code></pre><h2 id="installing-phppgadmin">Installing phpPgAdmin</h2>
<h3 id="setting-up-host">Setting Up Host</h3>
<p>We want to be able to lunch phpPgAdmin by going to <a href="http://phppgadmin.app" title="phpPgAdmin">http://phppgadmin.app</a> in the address bar of the browser.</p>
<p>So, first of all, run <code>sudo gedit /etc/hosts</code> and add an entry as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">127.1.1.1    phppgadmin.app
</span></span></code></pre></div><h3 id="phppgadmin">phpPgAdmin</h3>
<p>Run the following commands to install phpmyadmin:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">cd</span> /usr/share
</span></span><span class="line"><span class="cl">sudo git clone git@github.com:phppgadmin/phppgadmin.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> phppgadmin/config
</span></span><span class="line"><span class="cl">sudo cp config.inc.php-dist config.inc.php
</span></span></code></pre></div><p>If extra login security is true, then logins via phpPgAdmin with no password or certain usernames (pgsql, postgres, root, administrator) will be denied. Only set this false once you have read the FAQ and understand how to change PostgreSQL&rsquo;s pg_hba.conf to enable passworded local connections.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="nv">$conf</span><span class="p">[</span><span class="s1">&#39;servers&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;host&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;localhost&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$conf</span><span class="p">[</span><span class="s1">&#39;extra_login_security&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span></span></code></pre></div><h3 id="setting-up-server-block">Setting Up Server Block</h3>
<p>Now, we will setup an <strong>Nginx server block</strong> (a.k.a. virtual host in Apache httpd).</p>
<p>Let&rsquo;s run the command <code>sudo touch /etc/nginx/conf.d/phppgadmin.conf</code> to create a <strong>site</strong> (configuration file).</p>
<p>Let&rsquo;s open it with <code>sudo gedit /etc/nginx/conf.d/phppgadmin.conf</code> and add the contents as follows.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">root</span> <span class="s">/usr/share/phppgadmin</span><span class="p">;</span> <span class="c1"># make sure to enter the correct location of phppgadmin here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kn">index</span> <span class="s">index.php</span> <span class="s">index.html</span> <span class="s">index.htm</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">phppgadmin.app</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="nv">$uri/</span> <span class="s">/index.php?</span><span class="nv">$query_string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="p">~</span> <span class="sr">\.php$</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="s">/index.php</span> <span class="p">=</span><span class="mi">404</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">fastcgi_split_path_info</span> <span class="s">^(.+\.php)(/.+)</span>$<span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">fastcgi_pass</span> <span class="s">unix:/run/php/php7.1-fpm.sock</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">fastcgi_index</span> <span class="s">index.php</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">fastcgi_param</span> <span class="s">SCRIPT_FILENAME</span> <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">include</span> <span class="s">fastcgi_params</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="activating-the-server-block">Activating the server block</h3>
<p>Now we have to restart Nginx to activate our new site (config file) by running:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo systemctl restart nginx.service
</span></span></code></pre></div><p>Try hitting <a href="http://phppgadmin.app" title="phpPgGAdmin">http://phppgadmin.app</a> and it should work!</p>
<h2 id="conclusion">Conclusion</h2>
<p>There we have it! We should by now have a working and relatively secure LEPP server stack with Nginx running at <a href="http://localhost" title="Localhost">http://localhost</a>, as well as our phpPgAdmin app running at <a href="http://phppgadmin.app" title="phpPgAdmin">http://phppgadmin.app</a></p>
<p><em>In this guide we didn&rsquo;t talk anything about firewall. This is because a fresh install of &ldquo;vanilla&rdquo; Ubuntu 16.04 should not have one running it automatically. We may research about it later if we wish to. Right now, that would be beyond the scope of this guide.</em></p>
<p>So, did you find this guide helpful? Feedbacks are precious. Suggestions are highly appreciated.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Git Installation and Configure SSH</title>
      <link>http://localhost:1313/blogs/tech/git-installation-and-configure-ssh/</link>
      <pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/tech/git-installation-and-configure-ssh/</guid>
      <description>Guide to install and configure SSH in Windows and Linux.</description>
      <content:encoded><![CDATA[<h2 id="installation">Installation</h2>
<h3 id="for-linux-debianubuntu">For Linux (Debian/Ubuntu)</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install git
</span></span></code></pre></div><p>We can check if <strong>Git</strong> is installed by typing <code>git --version</code> in your Terminal or Git Bash (Windows) respectively.</p>
<h3 id="for-windows">For Windows</h3>
<p>Download Git for Windows from this link <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<h2 id="configuration">Configuration</h2>
<h3 id="set-up-ssh-for-git">Set up SSH for Git</h3>
<p>Open your Terminal or Git Bash(Windows).</p>
<ul>
<li><strong>Ensure we have SSH client installed:</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ssh -v
</span></span><span class="line"><span class="cl">usage: ssh  <span class="o">[</span>-1246AaCfGgKkMNnqsTtVvXxYy<span class="o">]</span> <span class="o">[</span>-b bind_address<span class="o">]</span> <span class="o">[</span>-c cipher_spec<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-D <span class="o">[</span>bind_address:<span class="o">]</span>port<span class="o">]</span> <span class="o">[</span>-E log_file<span class="o">]</span> <span class="o">[</span>-e escape_char<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-F configfile<span class="o">]</span> <span class="o">[</span>-I pkcs11<span class="o">]</span> <span class="o">[</span>-i identity_file<span class="o">]</span> <span class="o">[</span>-L address<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-l login_name<span class="o">]</span> <span class="o">[</span>-m mac_spec<span class="o">]</span> <span class="o">[</span>-O ctl_cmd<span class="o">]</span> <span class="o">[</span>-o option<span class="o">]</span> <span class="o">[</span>-p port<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-Q query_option<span class="o">]</span> <span class="o">[</span>-R address<span class="o">]</span> <span class="o">[</span>-S ctl_path<span class="o">]</span> <span class="o">[</span>-W host:port<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-w local_tun<span class="o">[</span>:remote_tun<span class="o">]]</span> <span class="o">[</span>user@<span class="o">]</span>hostname <span class="o">[</span>command<span class="o">]</span>
</span></span></code></pre></div><p>List the contents of your ~/.ssh directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls -a ~/.ssh
</span></span><span class="line"><span class="cl">known_hosts
</span></span></code></pre></div><p><em>If we have already setup default identity, we can see two id_ files</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls -a ~/.ssh
</span></span><span class="line"><span class="cl">.  ..  id_rsa  id_rsa.pub  known_hosts
</span></span></code></pre></div><ul>
<li><strong>Set up our default identity:</strong></li>
</ul>
<p>The system adds keys for all identities to the <code>/home/&lt;yourname&gt;/.ssh</code> (Linux) or <code>/c/Users/&lt;yourname&gt;/.ssh</code> (Windows) directory. The following procedure creates a default identity.</p>
<p>Hit <code>ssh-keygen</code> command on Terminal or Git Bash.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ssh-keygen
</span></span><span class="line"><span class="cl">Generating public/private rsa key pair.
</span></span><span class="line"><span class="cl">Enter file in which to save the key <span class="o">(</span>/c/Users/&lt;yourname&gt;/.ssh/id_rsa<span class="o">)</span>:
</span></span></code></pre></div><p>Press enter to accept the default key and location or we can set somewhere else.</p>
<p>We enter and re-enter a passphrase when prompted. Unless you need a key for a process such as script, you should always provide a passphrase. The command creates your default identity with its public and private keys</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ssh-keygen
</span></span><span class="line"><span class="cl">Generating public/private rsa key pair.
</span></span><span class="line"><span class="cl">Enter file in which to save the key <span class="o">(</span>/c/Users/&lt;yourname&gt;/.ssh/id_rsa<span class="o">)</span>:
</span></span><span class="line"><span class="cl">Created directory <span class="s1">&#39;/c/&lt;yourname&gt;/&lt;yourname&gt;/.ssh&#39;</span>.
</span></span><span class="line"><span class="cl">Enter passphrase <span class="o">(</span>empty <span class="k">for</span> no passphrase<span class="o">)</span>:
</span></span><span class="line"><span class="cl">Enter same passphrase again:
</span></span><span class="line"><span class="cl">Your identification has been saved in /c/Users/&lt;yourname&gt;/.ssh/id_rsa.
</span></span><span class="line"><span class="cl">Your public key has been saved in /c/Users/&lt;yourname&gt;/.ssh/id_rsa.pub.
</span></span><span class="line"><span class="cl">The key fingerprint is:
</span></span><span class="line"><span class="cl">SHA256:+V6cLhFWngIFC+TdHwQHxJP39lsZUWnP6TDj1/7hBVA &lt;yourname&gt;@&lt;yourname&gt;
</span></span><span class="line"><span class="cl">The key<span class="err">&#39;</span>s randomart image is:
</span></span><span class="line"><span class="cl">+---<span class="o">[</span>RSA 2048<span class="o">]</span>----+
</span></span><span class="line"><span class="cl"><span class="p">|</span>     .o .<span class="o">==</span>+o E +<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>     . o.o+oo. + <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>      . o..<span class="o">=</span>oo..+<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>         .+.o*ooo<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>        S. oo.*.+<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>         ... <span class="nv">o</span> <span class="o">=</span>+<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>          ..+ .o+<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>         ..o  ..+<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>          ...  .o<span class="p">|</span>
</span></span><span class="line"><span class="cl">+----<span class="o">[</span>SHA256<span class="o">]</span>-----+
</span></span></code></pre></div><p>List the contents of your ~/.ssh directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls ~/.ssh
</span></span><span class="line"><span class="cl">.  ..  id_rsa  id_rsa.pub  known_hosts
</span></span></code></pre></div><ul>
<li><strong>Adding your SSH key to the ssh-agent:</strong></li>
</ul>
<p>Ensure ssh-agent is enabled:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>ssh-agent -s<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Agent pid 59566</span>
</span></span></code></pre></div><p>Add your SSH key to the ssh-agent</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh-add ~/.ssh/id_rsa
</span></span></code></pre></div><ul>
<li><strong>Find and take a note of your public key fingerprint. If you&rsquo;re using OpenSSH 6.7 or older:</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ssh-add -l
</span></span><span class="line"><span class="cl"><span class="c1"># 2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/&lt;yourname&gt;/.ssh/id_rsa (RSA)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">If you are using OpenSSH 6.8 or newer:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ssh-add -l -E md5
</span></span><span class="line"><span class="cl"><span class="c1"># 2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/&lt;yourname&gt;/.ssh/id_rsa (RSA)</span>
</span></span></code></pre></div><ul>
<li><strong>Install the public key on your Remote GitHub/Bitbucket account:</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cat ~/.ssh/id_rsa.pub
</span></span><span class="line"><span class="cl">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC2zeZVIph1tP0UZJ007AC1OWqThpYjDlao1PlQnZbrSMeS8LXkU/nMxuZdAv+2JeqhezOtb6/e8e50NOTWB9Z2O8thCMwc29cp6C+vHL2oWQYMcCOuT34/R2yDEOMQ5nkIZ1fVFJNCTIZUaKjyaHX89w0v2p9cMsZ1q36w9lEdKXs8N5fuN/6rAy3JQgMcbD+dDd0cWpP8CLiUyNCq32xwqhX+nS1P43AgOQdLpX74uljwr7rE2CmrJQkvh/m+h68tv8+mLMGJtg5cJ+doZ+9r9yPhKJYGEsW4bL+8sSRQn3gJWUib8xhOgaWrMfXj+94o1KbcI12lK772GNyP74rX &lt;yourname&gt;@&lt;yourname&gt;
</span></span></code></pre></div><p>Copy this output to respective SSH keys setting.</p>
<ul>
<li>GitHub Setting &raquo; SSH and GPG keys &raquo; New SSH key</li>
<li>Bitbucket Setting &raquo; SSH keys &raquo; Add Key</li>
</ul>
<h3 id="you-are-done">You are Done</h3>
<p>You have now successfully configured SSH for Git in Windows/Linux/Mac OS.</p>
<h3 id="first-time-git-setup">First Time Git Setup</h3>
<p>This is my configuration.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git config --global user.name <span class="s2">&#34;Sagar Chamling&#34;</span>
</span></span><span class="line"><span class="cl">$ git config --global user.email sgr.raee@gmail.com
</span></span><span class="line"><span class="cl">$ git config --global core.editor vim
</span></span><span class="line"><span class="cl">$ git config --global commit.gpgsign <span class="nb">true</span>
</span></span><span class="line"><span class="cl">$ git config --global pull.rebose <span class="nb">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gpg --list-secret-keys --keyid-format LONG
</span></span><span class="line"><span class="cl">  /Users/hubot/.gnupg/secring.gpg
</span></span><span class="line"><span class="cl">  ------------------------------------
</span></span><span class="line"><span class="cl">  sec   4096R/3AA5C34371567BD2 2016-03-10 <span class="o">[</span>expires: 2017-03-10<span class="o">]</span>
</span></span><span class="line"><span class="cl">  uid                          Hubot
</span></span><span class="line"><span class="cl">  ssb   4096R/42B317FD4BA89E7A 2016-03-10
</span></span><span class="line"><span class="cl">$  git config --global user.signingkey 3AA5C34371567BD2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Remember GPG password when signing git commits</span>
</span></span><span class="line"><span class="cl">$ vim ~/.gnupg/gpg-agent.conf
</span></span><span class="line"><span class="cl">$ default-cache-ttl <span class="m">3600</span>
</span></span></code></pre></div><h2 id="references">References</h2>
<ul>
<li><a href="https://help.github.com/articles/connecting-to-github-with-ssh">https://help.github.com/articles/connecting-to-github-with-ssh</a></li>
<li><a href="https://confluence.atlassian.com/bitbucket/set-up-ssh-for-git-728138079.html">https://confluence.atlassian.com/bitbucket/set-up-ssh-for-git-728138079.html</a></li>
<li><a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/telling-git-about-your-signing-key">https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/telling-git-about-your-signing-key</a></li>
<li><a href="https://stackoverflow.com/questions/36847431/remember-gpg-password-when-signing-git-commits">https://stackoverflow.com/questions/36847431/remember-gpg-password-when-signing-git-commits</a></li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
